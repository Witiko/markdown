name: test & publish
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
      - 'CHANGES.md'
      - 'contributions/*'
      - '.github/**/*'
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '30 4 * * MON'
env:
  DEBIAN_FRONTEND: noninteractive
permissions:
  contents: write
jobs:
  shellcheck:
    name: Style check (Bash)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@1.1.0
        env:
          SHELLCHECK_OPTS: -e SC1091
  luacheck:
    name: Style check (Lua)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install additional packages
        run: |
          set -ex
          sudo apt -qy update
          sudo apt -qy install --no-install-recommends git latexmk lua-check make texlive-xetex
      - name: Extract Lua scripts
        run: make base
      - name: Run luacheck
        run: luacheck *.lua
  markdownlint:
    name: Style check (Markdown)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install additional packages
        run: |
          set -ex
          sudo apt -qy update
          sudo apt -qy install --no-install-recommends git latexmk lua-check make texlive-xetex
      - name: Extract user manual
        run: make markdown.md
      - name: Run MarkdownLint
        uses: nosborn/github-action-markdown-cli@v2.0.0
        with:
          files: .
          config_file: .markdownlint.yaml
  flake8:
    name: Style check (Python)
    runs-on: ubuntu-latest
    container:
      image: python:3.10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install additional packages
        run: |
          set -ex
          pip install -U pip wheel setuptools
          pip install flake8
      - name: Run Flake8
        run: flake8 tests/test.py
  pytype:
    name: Type check (Python)
    needs:
      - flake8
    runs-on: ubuntu-latest
    container:
      image: python:3.10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install additional packages
        run: |
          set -ex
          pip install -U pip wheel setuptools
          pip install -r tests/requirements.txt
          pip install pytype
      - name: Run Pytype
        run: pytype tests/test.py
  build-docker-image:
    name: Build Docker image
    needs:
      - shellcheck
      - luacheck
      - markdownlint
      - pytype
    strategy:
      fail-fast: true
      matrix:
        texlive:
          - TL2022-historic
          - latest
    outputs:
      TL2022-historic: ${{ steps.temporary-tags.outputs.TL2022-historic }}
      latest: ${{ steps.temporary-tags.outputs.latest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: Build Docker image
        run: make docker-image TEXLIVE_TAG=${{ matrix.texlive }}
      - name: Authenticate Docker registry
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Publish Docker image with a temporary tag
        run: make docker-push-temporary-tag TEXLIVE_TAG=${{ matrix.texlive }}
      - name: Store the temporary tag
        id: temporary-tags
        run: |
          set -ex
          TEMPORARY_TAG="$(make docker-print-temporary-tag TEXLIVE_TAG=${{ matrix.texlive }})"
          echo "${{ matrix.texlive }}=$TEMPORARY_TAG" >> $GITHUB_OUTPUT
  test:
    name: Test Docker image
    needs:
      - build-docker-image
    strategy:
      fail-fast: true
      matrix:
        texlive:
          - TL2022-historic
          - latest
    runs-on: ubuntu-latest  # TODO: Replace with self-hosted.
    container:
      image: witiko/markdown:${{ needs.build-docker-image.outputs[matrix.texlive] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: Test Lua command-line interface
        run: |
          set -ex
          RESULT="$(printf '%s\n' 'Hello *Markdown*! $a_x + b_x = c_x$' | markdown-cli hybrid=true underscores=false"
          test "$RESULT" = '\markdownRendererDocumentBegin
          Hello \markdownRendererEmphasis{Markdown}! $a_x + b_x = c_x$\markdownRendererDocumentEnd'
      - name: Run unit tests
        run: make FAIL_FAST=${{ github.ref != 'refs/heads/main' }} test
  publish:
    name: Publish Docker image and artefacts
    needs:
      - build-docker-image
      - test
    strategy:
      fail-fast: true
      matrix:
        texlive:
          - TL2022-historic
          - latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: Fix ownership of repository
        if: matrix.texlive == 'latest'
        run: |
          set -ex
          DOCKER_IMAGE=witiko/markdown:${{ needs.build-docker-image.outputs[matrix.texlive] }}
          docker run --rm -v "$PWD":/git-repo -w /git-repo "$DOCKER_IMAGE" chown -R root:root /git-repo
      - name: Build distribution archives
        if: matrix.texlive == 'latest'
        run: |
          set -ex
          DOCKER_IMAGE=witiko/markdown:${{ needs.build-docker-image.outputs[matrix.texlive] }}
          docker run --rm -v "$PWD":/git-repo -w /git-repo "$DOCKER_IMAGE" make dist gh-pages
      - name: Upload artifact markdown.tds.zip
        if: matrix.texlive == 'latest'
        uses: actions/upload-artifact@v2
        with:
          name: markdown.tds.zip
          path: markdown.tds.zip
      - name: Upload artifact markdown.ctan.zip
        if: matrix.texlive == 'latest'
        uses: actions/upload-artifact@v2
        with:
          name: markdown.ctan.zip
          path: markdown.ctan.zip
      - name: Upload artifact markdown.zip
        if: matrix.texlive == 'latest'
        uses: actions/upload-artifact@v2
        with:
          name: markdown.zip
          path: markdown.zip
      - name: Upload artifact markdown.pdf
        if: matrix.texlive == 'latest'
        uses: actions/upload-artifact@v2
        with:
          name: markdown.pdf
          path: markdown.pdf
      - name: Publish user manual
        if: github.ref == 'refs/heads/main' && matrix.texlive == 'latest'
        uses: crazy-max/ghaction-github-pages@v2
        with:
          target_branch: gh-pages
          build_dir: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create a prerelease
        if: github.ref == 'refs/heads/main' && matrix.texlive == 'latest'
        uses: marvinpinto/action-automatic-releases@latest
        with:
          title: The latest version
          automatic_release_tag: latest
          prerelease: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            markdown.tds.zip
            markdown.ctan.zip
            markdown.zip
            markdown.pdf
      - name: Authenticate Docker registry
        if: github.ref == 'refs/heads/main'
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Publish Docker image
        if: github.ref == 'refs/heads/main'
        run: make docker-push-release-tag TEXLIVE_TAG=${{ matrix.texlive }}
  automerge:
    name: Automatically merge pull request
    needs:
      - publish
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Automatically merge pull request
        uses: pascalgn/automerge-action@v0.15.6
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
